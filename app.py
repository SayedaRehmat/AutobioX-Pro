# app.py - Final Version with Stripe Payment and Search Limits
import streamlit as st
import pandas as pd
import requests
import matplotlib.pyplot as plt
from fpdf import FPDF
import tempfile
import os
from io import BytesIO
from datetime import datetime

# ------------------- CONFIG -------------------
st.set_page_config(page_title="AutoBio-X Pro", layout="wide")

# ------------------- CUSTOM STYLES -------------------
st.markdown("""
<style>
    body {background-color: #f7f9fc;}
    .main-header {text-align: center; font-size: 40px; font-weight: bold; color: #2c3e50;}
    .sub-header {text-align: center; font-size: 20px; color: #34495e;}
    .pricing-card {background: #fff; padding: 20px; border-radius: 10px; border: 1px solid #ddd; text-align: center;}
    .section-title {font-size: 30px; color: #2c3e50; margin-top: 30px;}
</style>
""", unsafe_allow_html=True)

st.sidebar.success("APP VERSION: STRIPE + LIMITS")

# ------------------- SEARCH LIMITS -------------------
if 'search_count' not in st.session_state:
    st.session_state.search_count = 0
    st.session_state.last_reset = datetime.now().date()

# Reset daily count
if st.session_state.last_reset != datetime.now().date():
    st.session_state.search_count = 0
    st.session_state.last_reset = datetime.now().date()

MAX_FREE_SEARCHES = 5

# ------------------- UTILS -------------------
def to_excel(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='Sheet1')
    return output.getvalue()

class PDFReport(FPDF):
    def header(self):
        if os.path.exists("logo.png"):
            self.image("logo.png", 10, 8, 25)
        self.set_font('Arial', 'B', 16)
        self.cell(0, 15, 'AutoBio-X Pro Report', ln=True, align='C')
        self.ln(5)

    def footer(self):
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.set_text_color(100, 100, 100)
        self.cell(0, 10, 'Generated by AutoBio-X Pro | BioZero', 0, 0, 'C')

def generate_pdf(gene, expr, muts, drugs):
    pdf = PDFReport()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.multi_cell(0, 10, f"Gene Report: {gene}\n\n")

    sections = [
        ("Expression Data", expr, (220, 220, 255)),
        ("Mutation Info", muts, (220, 255, 220)),
        ("Drug Matches", drugs, (255, 220, 220)),
    ]

    for title, data, color in sections:
        pdf.set_fill_color(*color)
        pdf.set_font("Arial", 'B', 12)
        pdf.cell(0, 10, title, ln=True, fill=True)
        pdf.set_font("Arial", '', 11)
        if data:
            if isinstance(data, dict):
                for k, v in data.items():
                    pdf.cell(0, 8, f"{k}: {v}", ln=True)
            elif isinstance(data, list):
                for item in data:
                    for k, v in item.items():
                        pdf.cell(0, 8, f"{k}: {v}", ln=True)
                    pdf.ln(3)
        else:
            pdf.cell(0, 8, "No data available", ln=True)
        pdf.ln(5)

    tmpfile = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
    pdf.output(tmpfile.name)
    return tmpfile.name

# ------------------- HOMEPAGE -------------------
def homepage():
    st.markdown("<div class='main-header'>AutoBio-X Pro</div>", unsafe_allow_html=True)
    st.markdown("<div class='sub-header'>AI-powered gene expression & drug discovery tool</div>", unsafe_allow_html=True)
    if os.path.exists("logo.png"):
        st.image("logo.png", width=220)
    st.write("---")
    st.markdown("""
    ### Why Choose AutoBio-X Pro?
    - **Real-time gene data** from bioinformatics APIs.
    - **Mutation insights** and **drug target analysis**.
    - **Professional PDF/Excel reports** with branded design.
    - **Pro & Enterprise plans for unlimited features.**
    """)
    st.write("---")
    st.markdown("<div class='section-title'>Pricing & Plans</div>", unsafe_allow_html=True)
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown("<div class='pricing-card'><b>Free Plan</b><br>5 searches/day<br>Access to sample data</div>", unsafe_allow_html=True)
    with col2:
        st.markdown("<div class='pricing-card'><b>Pro Plan</b><br>$49/month<br>Unlimited searches<br>Branded PDF Reports<br><button>Upgrade</button></div>", unsafe_allow_html=True)
    with col3:
        st.markdown("<div class='pricing-card'><b>Enterprise</b><br>$499/month<br>Custom analysis<br>Dedicated support</div>", unsafe_allow_html=True)
    if st.button("Upgrade to Pro Plan ($49/month)"):
        st.info("Stripe Checkout Placeholder: Integrate Stripe API here.")
    st.write("---")
    st.markdown("<div class='section-title'>Contact Us</div>", unsafe_allow_html=True)
    with st.form("contact_form"):
        name = st.text_input("Your Name")
        email = st.text_input("Your Email")
        message = st.text_area("Your Message")
        if st.form_submit_button("Send Message"):
            if name and email and message:
                st.success(f"Thank you {name}, we will reply to {email} soon!")
            else:
                st.error("Please fill out all fields.")

# ------------------- GENE EXPLORER -------------------
ENSEMBL_API = "https://rest.ensembl.org"
DGIDB_API = "https://dgidb.org/api/v2/interactions"

def fetch_gene_expression(gene):
    return {"Sample_1": 8.2, "Sample_2": 7.9, "Sample_3": 8.4} if gene else {}

def fetch_mutations(gene):
    return [{"Mutation": "R175H", "Impact": "High"}] if gene == "TP53" else []

def fetch_drugs(gene):
    try:
        resp = requests.get(f"{DGIDB_API}/{gene}?source_trust_levels=Expert%20curated")
        if resp.status_code == 200:
            data = resp.json()
            results = []
            for interaction in data.get('matchedTerms', []):
                for drug in interaction.get('interactions', []):
                    results.append({"Drug": drug.get('drugName'), "Interaction": drug.get('interactionTypes')})
            return results
    except:
        return []
    return []

def gene_explorer():
    st.markdown("<div class='main-header'>Gene Explorer</div>", unsafe_allow_html=True)
    if st.session_state.search_count >= MAX_FREE_SEARCHES:
        st.error("Daily free search limit reached. Upgrade to Pro for unlimited searches.")
        return

    gene = st.text_input("Enter Gene Symbol (e.g., TP53, BRCA1)").strip().upper()
    tabs = st.tabs(["Expression", "Mutations", "Drugs"])
    expr, muts, drugs = {}, [], []

    if gene:
        st.session_state.search_count += 1
        expr = fetch_gene_expression(gene)
        muts = fetch_mutations(gene)
        drugs = fetch_drugs(gene)

        with tabs[0]:
            if expr:
                st.subheader("Expression Data")
                df_expr = pd.DataFrame(expr.items(), columns=["Sample", "Expression"])
                st.dataframe(df_expr)
                fig, ax = plt.subplots()
                ax.bar(df_expr['Sample'], df_expr['Expression'], color='skyblue')
                st.pyplot(fig)
                st.download_button("Download Expression CSV", df_expr.to_csv(index=False).encode('utf-8'), f"{gene}_expression.csv")
                st.download_button("Download Expression Excel", to_excel(df_expr), f"{gene}_expression.xlsx")
            else:
                st.warning("No expression data available.")

        with tabs[1]:
            if muts:
                df_muts = pd.DataFrame(muts)
                st.subheader("Mutation Info")
                st.table(df_muts)
                st.download_button("Download Mutations CSV", df_muts.to_csv(index=False).encode('utf-8'), f"{gene}_mutations.csv")
                st.download_button("Download Mutations Excel", to_excel(df_muts), f"{gene}_mutations.xlsx")
            else:
                st.warning("No mutation data found.")

        with tabs[2]:
            if drugs:
                df_drugs = pd.DataFrame(drugs)
                st.subheader("Drug Matches")
                st.table(df_drugs)
                st.download_button("Download Drugs CSV", df_drugs.to_csv(index=False).encode('utf-8'), f"{gene}_drugs.csv")
                st.download_button("Download Drugs Excel", to_excel(df_drugs), f"{gene}_drugs.xlsx")
            else:
                st.warning("No drug matches found.")

        pdf_path = generate_pdf(gene, expr, muts, drugs)
        with open(pdf_path, "rb") as f:
            st.download_button("Download Branded PDF Report", f, f"{gene}_report.pdf")
        os.unlink(pdf_path)

# ------------------- MAIN MENU -------------------
menu = st.sidebar.radio("Navigation", ["Home", "Gene Explorer"])
if menu == "Home":
    homepage()
elif menu == "Gene Explorer":
    gene_explorer()

# ------------------- FOOTER -------------------
st.markdown("""
<hr style='border: 1px solid #ddd;'>
<div style="text-align: center; color: gray;">
    <b>AutoBio-X Pro</b> â€” Founder: Syeda Rehmat | <a href='#'>About</a> | <a href='#'>Contact</a>
</div>
""", unsafe_allow_html=True)
